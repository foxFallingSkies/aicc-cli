{
  "El Dialog Template": {
    "scope": "vue",
    "prefix": "el-dialog-template",
    "body": [
      "<template>",
      "  <el-dialog v-model=\"control.show\" :title=\"control.title\" width=\"600px\">",
      "    <template #footer class=\"dialog-footer\">",
      "      <el-button @click=\"handleClose\">取消</el-button>",
      "      <el-button",
      "        type=\"primary\"",
      "        @click=\"handleSave\"",
      "        :disabled=\"debounceBtn\"",
      "      >",
      "        保存",
      "      </el-button>",
      "    </template>",
      "  </el-dialog>",
      "</template>",
      "",
      "<script lang=\"ts\" setup>",
      "import API from \"@/api\";",
      "import { ElMessage } from \"element-plus\";",
      "import { ref, onMounted } from \"vue\";",
      "const props = defineProps({",
      "  control: {",
      "    type: Object,",
      "    default: () => {},",
      "  },",
      "});",
      "const emit = defineEmits([\"refreshData\"]);",
      "const handleClose = () => {",
      "  props.control.show = false;",
      "};",
      "const handleSave = (type) => {};",
      "const debounceBtn = ref<boolean>(false);",
      "const getApi = async () => {",
      "  let { code, data, msg } = await API.getEndDateRequire(props.control.id);",
      "  if (code - 0 === 0) {",
      "  } else {",
      "    ElMessage.error(msg);",
      "  }",
      "};",
      "onMounted(() => {",
      "});",
      "</script>",
      "",
      "<style scoped lang=\"scss\"></style>"
    ],
    "description": "el-puls-dialog"
  },
  "El Drawer Template": {
    "scope": "vue",
    "prefix": "el-drawer-template",
    "body": [
      "<template>",
      "  <el-drawer",
      "    v-model=\"control.show\"",
      "    :title=\"control.title\"",
      "    size=\"760px\"",
      "    :close-on-click-modal=\"false\"",
      "    :close-on-press-escape=\"false\"",
      "    @close=\"handleClose\"",
      "    destroy-on-close",
      "  >",
      "    <div class=\"title-quote\">测评任务</div>",
      "    <template #footer>",
      "      <div class=\"tanovo-ui-btn-group\">",
      "        <div class=\"submit\">",
      "          <el-button",
      "            type=\"warning\"",
      "            @click=\"handleSave('保存并提交')\"",
      "            :disabled=\"debounceBtn\"",
      "          >",
      "            保存并提交",
      "          </el-button>",
      "        </div>",
      "        <div class=\"others\">",
      "          <el-button type=\"info\" @click=\"handleClose\">取消</el-button>",
      "          <el-button",
      "            type=\"primary\"",
      "            @click=\"handleSave('保存')\"",
      "            :disabled=\"debounceBtn\"",
      "          >",
      "            保存",
      "          </el-button>",
      "        </div>",
      "      </div>",
      "    </template>",
      "  </el-drawer>",
      "</template>",
      "<script lang=\"ts\" setup>",
      "import API from \"@/api\";",
      "import { ElMessage } from \"element-plus\";",
      "import { ref, onMounted } from \"vue\";",
      "const props = defineProps({",
      "  control: {",
      "    type: Object,",
      "    default: () => {},",
      "  },",
      "});",
      "const emit = defineEmits([\"refreshData\"]);",
      "const handleClose = () => {",
      "  props.control.show = false;",
      "};",
      "const handleSave = (type) => {};",
      "const debounceBtn = ref<boolean>(false);",
      "const getApi = async () => {",
      "  let { code, data, msg } = await API.getEndDateRequire(props.control.id);",
      "  if (code - 0 === 0) {",
      "  } else {",
      "    ElMessage.error(msg);",
      "  }",
      "};",
      "onMounted(() => {",
      "});",
      "</script>",
      "<style lang=\"scss\" scoped></style>"
    ],
    "description": "el-puls-drawer"
  },
  "XF DialogTable": {
    "scope": "vue",
    "prefix": "xfDialogTable",
    "body": [
      "<template>",
      "  <f-dialog v-model=\"control.show\" width=\"800\" title=\"\" :btnArr=\"btnArr\" :loading=\"true\" @btn-click=\"btnClick\">",
      "    <template #content>",
      "      <f-table",
      "        ref=\"tableRef\"",
      "        :data=\"tableData\"",
      "        :columns=\"columnsData\"",
      "        :action=\"action\"",
      "        :page=\"pageProps\"",
      "        :loading=\"isLoading\"",
      "        @action-click=\"tableClick\"",
      "        @update:currentPage=\"handlePageChange('page', \\$event)\"",
      "        @update:pageSize=\"handlePageChange('size', \\$event)\"></f-table>",
      "    </template>",
      "    <template #footer></template>",
      "  </f-dialog>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { ref, reactive, onBeforeMount } from 'vue'",
      "import { getElements } from '@/http/api/module-manage'",
      "const props = defineProps({",
      "  control: {",
      "    type: Object,",
      "    default: () => {}",
      "  },",
      "  curRowData: {",
      "    type: Object,",
      "    default: () => {}",
      "  }",
      "})",
      "const btnArr: Array<any> = reactive([",
      "  {",
      "    name: '取消',",
      "    code: 'cancel'",
      "  },",
      "  {",
      "    name: '确认',",
      "    code: 'confirm',",
      "    type: 'primary'",
      "  }",
      "])",
      "// 按钮点击事件",
      "const btnClick = (code: string) => {",
      "  switch (code) {",
      "    case 'cancel':",
      "      break",
      "    case 'confirm':",
      "      break",
      "    default:",
      "      break",
      "  }",
      "}",
      "// 表格数据",
      "const tableData: any = ref([])",
      "// 表格区配置",
      "const columnsData = [",
      "  {",
      "    label: '调试ID',",
      "    prop: 'name',",
      "    minWidth: 150",
      "  },",
      "  {",
      "    label: '调试状态',",
      "    prop: 'check_result'",
      "  },",
      "  {",
      "    label: '运行时长',",
      "    prop: 'cost'",
      "  },",
      "  {",
      "    label: '创建时间',",
      "    prop: 'type'",
      "  },",
      "  {",
      "    label: '操作',",
      "    slot: 'action',",
      "    width: 80,",
      "    fixed: 'right'",
      "  }",
      "]",
      "// 列表操作项配置",
      "const action = ref([",
      "  {",
      "    name: '查看',",
      "    code: 'preview'",
      "  }",
      "])",
      "// 表格区操作点击事件",
      "const tableClick = (data: any, code: string, index: number) => {",
      "  switch (code) {",
      "    case 'preview':",
      "      break",
      "    default:",
      "      break",
      "  }",
      "}",
      "// 分页",
      "const pageProps = reactive({",
      "  code: props.curRowData?.code,",
      "  page: 1,",
      "  size: 10,",
      "  name: '',",
      "  sortType: 'desc',",
      "  total: 0",
      "})",
      "// 分页操作",
      "const handlePageChange = (type: string, val: number) => {",
      "  if (type === 'page') {",
      "    pageProps.page = val",
      "  } else {",
      "    pageProps.page = 1",
      "    pageProps.size = val",
      "  }",
      "  getTableData()",
      "}",
      "const isLoading = ref(false)",
      "",
      "const getTableData = async (goFirst = false) => {",
      "  goFirst && (pageProps.page = 1)",
      "  isLoading.value = true",
      "  const { total, ...rest } = pageProps",
      "  try {",
      "    let res = await getElements(rest)",
      "    tableData.value = res?.content || []",
      "    pageProps.total = res?.totalElements || 0",
      "    isLoading.value = false",
      "  } catch (error) {",
      "    isLoading.value = false",
      "  }",
      "}",
      "onBeforeMount(() => {",
      "  getTableData()",
      "})",
      "</script>",
      "",
      "<style scoped lang=\"scss\"></style>"
    ],
    "description": "Vue 3 component with <f-dialog> and <f-table> setup."
  },
  "XF Dialog": {
    "scope": "vue",
    "prefix": "xfDialog",
    "body": [
      "<template>",
      "  <f-dialog v-model=\"${1:control}.show\" width=\"800\" title=\"\" :btnArr=\"${2:btnArr}\" :loading=\"true\" @btn-click=\"${3:btnClick}\">",
      "    <template #content></template>",
      "  </f-dialog>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "import { ref, reactive, onBeforeMount } from 'vue'",
      "const props = defineProps({",
      "  control: {",
      "    type: Object,",
      "    default: () => {}",
      "  }",
      "})",
      "const ${2:btnArr}: Array<any> = reactive([",
      "  {",
      "    name: '取消',",
      "    code: 'cancel'",
      "  },",
      "  {",
      "    name: '确认',",
      "    code: 'confirm',",
      "    type: 'primary'",
      "  }",
      "])",
      "// 按钮点击事件",
      "const ${3:btnClick} = (code: string) => {",
      "  switch (code) {",
      "    case 'cancel':",
      "      break",
      "    case 'confirm':",
      "      break",
      "    default:",
      "      break",
      "  }",
      "}",
      "",
      "onBeforeMount(() => {})",
      "</script>",
      "",
      "<style scoped lang=\"scss\"></style>"
    ],
    "description": "Vue 3 component with <f-dialog>"
  },
  "XF DialogForm": {
    "prefix": "xfDialogForm",
    "body": [
      "<template>",
      "  <f-dialog",
      "    v-model=\"${1:control.show}\"",
      "    width=\"${2:514}\"",
      "    title=\"${3:添加服务}\"",
      "    ok-text=\"${4:确认}\"",
      "    :btnArr=\"${5:btnArr}\"",
      "    :formObj=\"${6:formObj}\"",
      "    :loading=\"${7:true}\"",
      "    @btn-click=\"${8:btnClick}\"",
      "    :fModelVal=\"${9:modelVal}\"",
      "    @update:f-model-val=\"${10:updateFModel}\"></f-dialog>",
      "</template>",
      "<script lang=\"ts\" setup>",
      "import { ref, reactive, onMounted } from 'vue'",
      "const props = defineProps({",
      "  control: {",
      "    type: Object,",
      "    default: () => {}",
      "  }",
      "})",
      "const modelVal = ref({",
      "  zone: ''",
      "})",
      "const updateFModel = (val: any) => {",
      "  modelVal.value = val",
      "}",
      "// 按钮点击事件",
      "const btnClick = async (code: string) => {",
      "  switch (code) {",
      "    case 'cancel':",
      "      props.control.show = false",
      "      break",
      "    case 'confirm':",
      "      break",
      "    default:",
      "      break",
      "  }",
      "}",
      "const btnArr: Array<any> = reactive([",
      "  {",
      "    name: '取消',",
      "    code: 'cancel'",
      "  },",
      "  {",
      "    name: '确认',",
      "    code: 'confirm',",
      "    type: 'primary'",
      "  }",
      "])",
      "const formObj: any = ref({",
      "  labelWidth: 110,",
      "  labelPosition: 'left',",
      "  rules: {",
      "    zone: [{ required: true, message: '请选择环境', trigger: ['change', 'blur'] }]",
      "  },",
      "  formData: [",
      "    {",
      "      label: '选择环境',",
      "      prop: 'zone',",
      "      type: 'el-select',",
      "      props: {",
      "        placeholder: '请选择环境',",
      "        filterable: true",
      "      },",
      "      slot: {",
      "        options: []",
      "      }",
      "    }",
      "  ]",
      "})",
      "onMounted(() => {})",
      "</script>",
      "<style lang=\"scss\" scoped></style>"
    ],
    "description": "A Vue component template with TypeScript setup"
  }
}